import { FontLoader, TTFLoader } from 'three-stdlib';
import { suspend, preload, clear } from 'suspend-react';

let fontLoader = null;
let ttfLoader = null;
function parseFontData(fontData) {
  if (!fontLoader) {
    fontLoader = new FontLoader();
  }
  return fontLoader.parse(fontData);
}
function parseTtfArrayBuffer(ttfData) {
  if (!ttfLoader) {
    ttfLoader = new TTFLoader();
  }
  return ttfLoader.parse(ttfData);
}
async function loadFontData(font) {
  if (typeof font === 'string') {
    var _res$headers$get;
    const res = await fetch(font);
    if ((_res$headers$get = res.headers.get('Content-Type')) != null && _res$headers$get.includes('application/json')) {
      return await res.json();
    } else {
      const arrayBuffer = await res.arrayBuffer();
      return parseTtfArrayBuffer(arrayBuffer);
    }
  } else {
    return font;
  }
}
async function loader(font) {
  const fontData = await loadFontData(font);
  return parseFontData(fontData);
}
function useFont(font) {
  return suspend(loader, [font]);
}
useFont.preload = font => preload(loader, [font]);
useFont.clear = font => clear([font]);

export { useFont };
